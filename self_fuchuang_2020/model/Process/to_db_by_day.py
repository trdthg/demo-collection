import calendar

import pandas as pd

from DB import DB

def create_tables(db):
    sql1 = f"""CREATE TABLE IF NOT EXISTS list5 (
            station  CHAR(20) NOT NULL,
            in_flow FLOAT,
            out_flow FLOAT,
            in_flow_plus FLOAT,
            out_flow_plus FLOAT,
            month INT NOT NULL,
            day INT NOT NULL )"""
    sql2 = f"""CREATE TABLE IF NOT EXISTS list6 (
            station_in  CHAR(20) NOT NULL,
            station_out  CHAR(20) NOT NULL,
            flow FLOAT,
            flow_plus FLOAT,
            month INT NOT NULL,
            day INT NOT NULL )"""
    sql3 = f"""CREATE TABLE IF NOT EXISTS list7 (
            station_1  CHAR(20) NOT NULL,
            station_2  CHAR(20) NOT NULL,
            flow FLOAT,
            month INT NOT NULL,
            day INT NOT NULL )"""
    sql4 = f"""CREATE TABLE IF NOT EXISTS list8  (
            linename CHAR(20) NOT NULL,
            flow FLOAT,
            month INT NOT NULL,
            day INT NOT NULL )"""
    db.cursor.execute(sql1)
    db.cursor.execute(sql2)
    db.cursor.execute(sql3)
    db.cursor.execute(sql4)

def find1(db):
    for month in [3,4,5,6]:
        station_dict= {}
        res = calendar.monthrange(2020, month)
        day = res
        data = []
        for day in range(1, res[1]):
            print(month, day)
            sql = f"""SELECT * FROM list1_{month} WHERE time_start REGEXP "{month}:.+:.+" """
            db.cursor.execute(sql)
            a = db.cursor.fetchall()
            # 每天各个站点的流量和

            for key in [65.0, 49.0, 149.0, 74.0, 128.0, 34.0, 106.0, 110.0, 97.0, 80.0, 89.0, 64.0, 150.0, 154.0, 107.0, 83.0, 108.0, 47.0, 159.0, 1.0, 63.0, 129.0, 9.0, 163.0, 53.0, 79.0, 18.0, 123.0, 127.0, 81.0, 27.0, 48.0, 151.0, 68.0, 52.0, 76.0, 57.0, 71.0, 139.0, 105.0, 51.0, 24.0, 143.0, 156.0, 61.0, 50.0, 119.0, 66.0, 12.0, 161.0, 21.0, 133.0, 22.0, 138.0, 41.0, 30.0, 67.0, 144.0, 29.0, 126.0, 115.0, 40.0, 131.0, 39.0, 100.0, 135.0, 167.0, 113.0, 141.0, 142.0, 158.0, 44.0, 117.0, 147.0, 42.0, 35.0, 87.0, 109.0, 33.0, 112.0, 153.0, 125.0, 121.0, 11.0, 157.0, 114.0, 168.0, 134.0, 85.0, 2.0, 4.0, 103.0, 145.0, 88.0, 94.0, 160.0, 7.0, 6.0, 8.0, 75.0, 102.0, 90.0, 84.0, 59.0, 19.0, 62.0, 165.0, 38.0, 58.0, 43.0, 10.0, 96.0, 132.0, 37.0, 16.0, 69.0, 54.0, 56.0, 45.0, 152.0, 164.0, 82.0, 111.0, 140.0, 13.0, 70.0, 55.0, 20.0, 23.0, 118.0, 162.0, 15.0, 86.0, 46.0, 3.0, 25.0, 146.0, 130.0, 120.0, 77.0, 122.0, 36.0, 28.0, 124.0, 166.0, 99.0, 136.0, 137.0, 101.0, 31.0, 17.0, 26.0, 95.0, 72.0, 93.0, 92.0, 116.0, 32.0, 91.0, 60.0, 148.0, 73.0]:
                station = f"Sta{int(key)}"
                in_flow, out_flow, in_flow_plus, out_flow_plus = 0.,0.,0.,0.
                station_dict[station] = [f'{station}', in_flow, out_flow, in_flow_plus, out_flow_plus, month, day]
            station_dict['全网'] = [f'全网', in_flow, out_flow, in_flow_plus, out_flow_plus, month, day]
            for row in a:
                try:
                    station_dict[row[0]][1] += row[1]
                    station_dict[row[0]][2] += row[2]
                    station_dict[row[0]][3] += row[3]
                    station_dict[row[0]][4] += row[4]
                    station_dict['全网'][1] += row[1]
                    station_dict['全网'][2] += row[2]
                    station_dict['全网'][3] += row[3]
                    station_dict['全网'][4] += row[4]
                except:
                    pass
            for key in station_dict.keys():
                a = station_dict[key]
                data.append((a[0],float(a[1]),float(a[2]),float(a[3]),float(a[4]),int(a[5]), int(a[6])))

        db.cursor.executemany("INSERT INTO list5 VALUES(%s,%s,%s,%s,%s,%s,%s)", data)
        db.connect_info.commit()

def find2(db):
    for month in [3,4,5,6]:
        station_dict= {}
        res = calendar.monthrange(2020, month)
        day = res
        data = []
        for day in range(1, res[1]):
            print(month, day)
            sql = f"""SELECT * FROM list2_{month} WHERE time_start REGEXP "{month}:.+:.+" """
            db.cursor.execute(sql)
            a = db.cursor.fetchall()
            # 每天各个站点的流量和
            for key in [65.0, 49.0, 149.0, 74.0, 128.0, 34.0, 106.0, 110.0, 97.0, 80.0, 89.0, 64.0, 150.0, 154.0, 107.0, 83.0, 108.0, 47.0, 159.0, 1.0, 63.0, 129.0, 9.0, 163.0, 53.0, 79.0, 18.0, 123.0, 127.0, 81.0, 27.0, 48.0, 151.0, 68.0, 52.0, 76.0, 57.0, 71.0, 139.0, 105.0, 51.0, 24.0, 143.0, 156.0, 61.0, 50.0, 119.0, 66.0, 12.0, 161.0, 21.0, 133.0, 22.0, 138.0, 41.0, 30.0, 67.0, 144.0, 29.0, 126.0, 115.0, 40.0, 131.0, 39.0, 100.0, 135.0, 167.0, 113.0, 141.0, 142.0, 158.0, 44.0, 117.0, 147.0, 42.0, 35.0, 87.0, 109.0, 33.0, 112.0, 153.0, 125.0, 121.0, 11.0, 157.0, 114.0, 168.0, 134.0, 85.0, 2.0, 4.0, 103.0, 145.0, 88.0, 94.0, 160.0, 7.0, 6.0, 8.0, 75.0, 102.0, 90.0, 84.0, 59.0, 19.0, 62.0, 165.0, 38.0, 58.0, 43.0, 10.0, 96.0, 132.0, 37.0, 16.0, 69.0, 54.0, 56.0, 45.0, 152.0, 164.0, 82.0, 111.0, 140.0, 13.0, 70.0, 55.0, 20.0, 23.0, 118.0, 162.0, 15.0, 86.0, 46.0, 3.0, 25.0, 146.0, 130.0, 120.0, 77.0, 122.0, 36.0, 28.0, 124.0, 166.0, 99.0, 136.0, 137.0, 101.0, 31.0, 17.0, 26.0, 95.0, 72.0, 93.0, 92.0, 116.0, 32.0, 91.0, 60.0, 148.0, 73.0]:
                for key2 in [65.0, 49.0, 149.0, 74.0, 128.0, 34.0, 106.0, 110.0, 97.0, 80.0, 89.0, 64.0, 150.0, 154.0, 107.0, 83.0, 108.0, 47.0, 159.0, 1.0, 63.0, 129.0, 9.0, 163.0, 53.0, 79.0, 18.0, 123.0, 127.0, 81.0, 27.0, 48.0, 151.0, 68.0, 52.0, 76.0, 57.0, 71.0, 139.0, 105.0, 51.0, 24.0, 143.0, 156.0, 61.0, 50.0, 119.0, 66.0, 12.0, 161.0, 21.0, 133.0, 22.0, 138.0, 41.0, 30.0, 67.0, 144.0, 29.0, 126.0, 115.0, 40.0, 131.0, 39.0, 100.0, 135.0, 167.0, 113.0, 141.0, 142.0, 158.0, 44.0, 117.0, 147.0, 42.0, 35.0, 87.0, 109.0, 33.0, 112.0, 153.0, 125.0, 121.0, 11.0, 157.0, 114.0, 168.0, 134.0, 85.0, 2.0, 4.0, 103.0, 145.0, 88.0, 94.0, 160.0, 7.0, 6.0, 8.0, 75.0, 102.0, 90.0, 84.0, 59.0, 19.0, 62.0, 165.0, 38.0, 58.0, 43.0, 10.0, 96.0, 132.0, 37.0, 16.0, 69.0, 54.0, 56.0, 45.0, 152.0, 164.0, 82.0, 111.0, 140.0, 13.0, 70.0, 55.0, 20.0, 23.0, 118.0, 162.0, 15.0, 86.0, 46.0, 3.0, 25.0, 146.0, 130.0, 120.0, 77.0, 122.0, 36.0, 28.0, 124.0, 166.0, 99.0, 136.0, 137.0, 101.0, 31.0, 17.0, 26.0, 95.0, 72.0, 93.0, 92.0, 116.0, 32.0, 91.0, 60.0, 148.0, 73.0]:
                    station = f"Sta{int(key)}"
                    station2 = f"Sta{int(key2)}"
                    flow, flow_plus = 0.,0.
                    station_dict[(station, station2)] = [f'{station}', f'{station2}', flow, flow_plus, month, day]
            for row in a:
                try:
                    station_dict[(row[0],row[1])][2] += row[2]
                    station_dict[(row[0],row[1])][3] += row[3]
                except:
                    pass
            for key in station_dict.keys():
                a = station_dict[key]
                data.append((a[0],a[1],float(a[2]),float(a[3]),int(a[4]),int(a[5])))
                
        db.cursor.executemany("INSERT INTO list6 VALUES(%s,%s,%s,%s,%s,%s)", data)
        db.connect_info.commit()

def find3(db):
    flow, flow_plus = 0 , 0
    for month in [3,4,5,6]:
        station_dict= {}
        res = calendar.monthrange(2020, month)
        day = res
        data = []
        for day in range(1, res[1]):
            print(month, day)
            sql = f"""SELECT * FROM list3_{month} WHERE time_start REGEXP "{month}:.+:.+" """
            db.cursor.execute(sql)
            a = db.cursor.fetchall()
            # 每天各个站点的流量和
            for key in [(49.0, 65.0), (65.0, 49.0), (149.0, 49.0), (49.0, 149.0), (74.0, 149.0), (149.0, 74.0), (128.0, 74.0), (74.0, 128.0), (34.0, 128.0), (128.0, 34.0), (106.0, 34.0), (34.0, 106.0), (110.0, 106.0), (106.0, 110.0), (97.0, 110.0), (110.0, 97.0), (80.0, 97.0), (97.0, 80.0), (89.0, 80.0), (80.0, 89.0), (64.0, 89.0), (136.0, 89.0), (137.0, 89.0), (89.0, 64.0), (150.0, 64.0), (64.0, 150.0), (154.0, 150.0), (150.0, 154.0), (107.0, 154.0), (154.0, 107.0), (83.0, 107.0), (107.0, 83.0), (108.0, 83.0), (83.0, 108.0), (47.0, 108.0), (18.0, 47.0), (123.0, 47.0), (47.0, 159.0), (1.0, 159.0), (159.0, 1.0), (129.0, 63.0), (3.0, 63.0), (25.0, 63.0), (63.0, 129.0), (9.0, 129.0), (129.0, 9.0), (163.0, 9.0), (9.0, 163.0), (53.0, 163.0), (163.0, 53.0), (79.0, 53.0), (53.0, 79.0), (18.0, 79.0), (79.0, 18.0), (47.0, 18.0), (47.0, 123.0), (127.0, 123.0), (123.0, 127.0), (81.0, 127.0), (91.0, 127.0), (60.0, 127.0), (127.0, 81.0), (27.0, 81.0), (81.0, 27.0), (48.0, 27.0), (27.0, 48.0), (151.0, 48.0), (48.0, 151.0), (68.0, 151.0), (151.0, 68.0), (52.0, 68.0), (68.0, 52.0), (76.0, 52.0), (52.0, 76.0), (57.0, 76.0), (76.0, 57.0), (71.0, 57.0), (57.0, 71.0), (139.0, 71.0), (71.0, 139.0), (105.0, 139.0), (139.0, 105.0), (51.0, 105.0), (105.0, 51.0), (24.0, 51.0), (51.0, 24.0), (156.0, 143.0), (143.0, 156.0), (61.0, 156.0), (156.0, 61.0), (50.0, 61.0), (61.0, 50.0), (119.0, 50.0), (50.0, 119.0), (66.0, 119.0), (119.0, 66.0), (12.0, 66.0), (66.0, 12.0), (161.0, 12.0), (12.0, 161.0), (21.0, 161.0), (161.0, 21.0), (133.0, 21.0), (21.0, 133.0), (22.0, 133.0), (133.0, 22.0), (138.0, 22.0), (22.0, 138.0), (41.0, 138.0), (138.0, 41.0), (30.0, 41.0), (32.0, 41.0), (91.0, 41.0), (41.0, 30.0), (67.0, 30.0), (30.0, 67.0), (144.0, 67.0), (67.0, 144.0), (29.0, 144.0), (144.0, 29.0), (126.0, 29.0), (29.0, 126.0), (115.0, 126.0), (126.0, 115.0), (40.0, 115.0), (118.0, 115.0), (162.0, 115.0), (115.0, 40.0), (131.0, 40.0), (40.0, 131.0), (39.0, 131.0), (131.0, 39.0), (100.0, 39.0), (39.0, 100.0), (135.0, 100.0), (100.0, 135.0), (167.0, 135.0), (168.0, 135.0), (134.0, 135.0), (135.0, 167.0), (113.0, 167.0), (167.0, 113.0), (141.0, 113.0), (113.0, 141.0), (142.0, 141.0), (141.0, 142.0), (158.0, 142.0), (142.0, 158.0), (44.0, 158.0), (158.0, 44.0), (117.0, 44.0), (44.0, 117.0), (147.0, 117.0), (117.0, 147.0), (42.0, 147.0), (147.0, 42.0), (35.0, 42.0), (42.0, 35.0), (87.0, 35.0), (35.0, 87.0), (109.0, 87.0), (88.0, 87.0), (94.0, 87.0), (87.0, 109.0), (33.0, 109.0), (109.0, 33.0), (112.0, 33.0), (33.0, 112.0), (153.0, 112.0), (112.0, 153.0), (125.0, 153.0), (153.0, 125.0), (121.0, 125.0), (125.0, 121.0), (11.0, 121.0), (121.0, 11.0), (114.0, 157.0), (157.0, 114.0), (168.0, 114.0), (162.0, 114.0), (15.0, 114.0), (114.0, 168.0), (135.0, 168.0), (135.0, 134.0), (85.0, 134.0), (90.0, 134.0), (95.0, 134.0), (134.0, 85.0), (2.0, 85.0), (85.0, 2.0), (4.0, 2.0), (2.0, 4.0), (103.0, 4.0), (4.0, 103.0), (145.0, 103.0), (103.0, 145.0), (88.0, 145.0), (145.0, 88.0), (87.0, 88.0), (87.0, 94.0), (160.0, 94.0), (94.0, 160.0), (7.0, 160.0), (160.0, 7.0), (6.0, 7.0), (7.0, 6.0), (8.0, 6.0), (6.0, 8.0), (75.0, 8.0), (8.0, 75.0), (102.0, 75.0), (45.0, 75.0), (152.0, 75.0), (75.0, 102.0), (84.0, 90.0), (26.0, 90.0), (134.0, 90.0), (90.0, 84.0), (59.0, 84.0), (84.0, 59.0), (19.0, 59.0), (59.0, 19.0), (62.0, 19.0), (19.0, 62.0), (165.0, 62.0), (62.0, 165.0), (38.0, 165.0), (165.0, 38.0), (58.0, 38.0), (38.0, 58.0), (10.0, 43.0), (43.0, 10.0), (96.0, 10.0), (10.0, 96.0), (132.0, 96.0), (96.0, 132.0), (37.0, 132.0), (132.0, 37.0), (16.0, 37.0), (37.0, 16.0), (69.0, 16.0), (16.0, 69.0), (54.0, 69.0), (69.0, 54.0), (56.0, 54.0), (23.0, 56.0), (118.0, 56.0), (75.0, 45.0), (75.0, 152.0), (164.0, 152.0), (152.0, 164.0), (82.0, 164.0), (164.0, 82.0), (111.0, 82.0), (82.0, 111.0), (140.0, 111.0), (99.0, 140.0), (140.0, 13.0), (70.0, 13.0), (13.0, 70.0), (55.0, 70.0), (70.0, 55.0), (20.0, 55.0), (55.0, 20.0), (23.0, 20.0), (20.0, 23.0), (56.0, 23.0), (17.0, 23.0), (26.0, 23.0), (56.0, 118.0), (115.0, 118.0), (115.0, 162.0), (114.0, 162.0), (114.0, 15.0), (86.0, 15.0), (95.0, 15.0), (72.0, 15.0), (15.0, 86.0), (46.0, 86.0), (86.0, 46.0), (3.0, 46.0), (46.0, 3.0), (63.0, 3.0), (93.0, 3.0), (92.0, 3.0), (63.0, 25.0), (146.0, 25.0), (25.0, 146.0), (130.0, 146.0), (146.0, 130.0), (120.0, 130.0), (130.0, 120.0), (122.0, 77.0), (77.0, 122.0), (36.0, 122.0), (122.0, 36.0), (28.0, 36.0), (36.0, 28.0), (124.0, 28.0), (28.0, 124.0), (166.0, 124.0), (124.0, 166.0), (99.0, 166.0), (166.0, 99.0), (140.0, 99.0), (89.0, 136.0), (89.0, 137.0), (101.0, 137.0), (137.0, 101.0), (31.0, 101.0), (101.0, 31.0), (17.0, 31.0), (31.0, 17.0), (23.0, 17.0), (23.0, 26.0), (90.0, 26.0), (134.0, 95.0), (15.0, 95.0), (15.0, 72.0), (93.0, 72.0), (72.0, 93.0), (3.0, 93.0), (3.0, 92.0), (116.0, 92.0), (92.0, 116.0), (32.0, 116.0), (116.0, 32.0), (41.0, 32.0), (41.0, 91.0), (127.0, 91.0), (127.0, 60.0), (148.0, 60.0), (60.0, 148.0), (73.0, 148.0), (148.0, 73.0), (108.0, 47.0), (159.0, 47.0), (54.0, 56.0), (111.0, 140.0), (13.0, 140.0)]:
                station = f"Sta{int(key[0])}"
                station2 = f"Sta{int(key[1])}"
                station_dict[(station, station2)] = [f'{station}', f'{station2}', flow, month, day]
            for row in a:
                try:
                    station_dict[(row[0],row[1])][2] += row[2]
                except:
                    pass
            for key in station_dict.keys():
                a = station_dict[key]
                data.append((a[0],a[1],float(a[2]),int(a[3]),int(a[4])))
                
        db.cursor.executemany("INSERT INTO list7 VALUES(%s,%s,%s,%s,%s)", data)
        db.connect_info.commit()

def find4(db):
    ccc = 0
    for month in [3,4,5,6]:
        station_dict= {}
        res = calendar.monthrange(2020, month)
        day = res
        data = []
        for day in range(1, res[1]):
            print(month, day)
            sql = f"""SELECT * FROM list4_{month} WHERE time_start REGEXP "^({day}:).+:.+$" """
            db.cursor.execute(sql)
            a = db.cursor.fetchall()
            # for aa in a:
            aa = set(aa[2].split(':')[0] for aa in a )
            print(aa)
            # 每天各个站点的流量和
            for key in ["1号线", "2号线", "3号线", "4号线", "5号线", "10号线", "11号线", "12号线","全网"]:
                flow = 0;
                station_dict[key] = [key, flow, month, day]
            for row in a:
                try:
                    station_dict[row[0]][1] += row[1]
                    station_dict['全网'][1] += row[1]
                    ccc += row[1]
                except:
                    pass
            for key in station_dict.keys():
                a = station_dict[key]
                # print(a[1])
                data.append((a[0],float(a[1]),int(a[2]), int(a[3])))
            
        print(ccc)
        db.cursor.executemany("INSERT INTO list8 VALUES(%s,%s,%s,%s)", data)
        db.connect_info.commit()

def main():
    # 统计天流量并插入数据库
    db = DB("library_flow")
    create_tables(db)
    data = find1(db)
    data = find2(db)
    data = find3(db)
    data = find4(db)
    db.close()



if __name__ == '__main__':
    main()